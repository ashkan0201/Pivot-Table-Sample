<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Modern Pivot Table UI</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/smoothness/jquery-ui.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/pivot.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/pivot.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://www.gstatic.com/charts/loader.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.11/c3.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.11/c3.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/d3_renderers.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/c3_renderers.min.js"></script>

    <style>
        body {
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradient 15s ease infinite;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            position: relative;
        }
        @keyframes gradient {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        .container {
            max-width: 1600px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 12px 24px rgba(0,0,0,0.3);
            transition: all 0.3s ease;
            z-index: 10;
        }
        #output, #chart-output {
            width: 100%;
            min-height: 700px;
            max-height: 700px;
            max-width: 100%;
            border: 1px solid #ddd;
            border-radius: 12px;
            overflow-x: auto;
            overflow-y: auto;
            background: white;
            padding: 20px;
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
            transition: transform 0.3s ease;
        }
        #output.is-visible, #chart-output.is-visible {
            animation: fadeIn 1s ease-in;
        }
        #output:hover, #chart-output:hover {
            transform: scale(1.02);
        }
        .btn-modern {
            border-radius: 30px;
            padding: 12px 30px;
            font-weight: 600;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        .btn-modern:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.2);
        }
        .pvtUi {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            color: black !important;
            max-width: 100%;
            overflow-x: auto;
            overflow-y: auto;
        }
        .pvtDropdown {
            background: #007bff;
            color: white;
            border-radius: 6px;
            padding: 10px;
            cursor: pointer;
            transition: background 0.2s;
        }
        .pvtDropdown:hover {
            background: #0056b3;
        }
        .pvtVals, .pvtRows, .pvtCols {
            background: #e9ecef;
            border-radius: 6px;
            padding: 12px;
            margin: 8px 0;
            color: black !important;
        }
        .pvtTable {
            width: auto;
            max-width: 100%;
            border-collapse: collapse !important;
            border-spacing: 0;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            white-space: nowrap;
            max-height: 100%;
        }
        .pvtTable th, .pvtTable td {
            padding: 14px;
            text-align: left;
            border: 1px solid #dee2e6 !important;
            transition: background 0.2s;
            color: black !important;
            min-width: 100px;
        }
        .pvtTable th {
            background: #007bff !important;
            color: white !important;
            position: sticky;
            top: 0;
            z-index: 10;
        }
        .pvtTable tbody tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        .pvtTable tr:hover td {
            background: #e9ecef !important;
        }
        .pvtFilterBox {
            background: #ffffff !important;
            color: black !important;
            border: 1px solid #dee2e6 !important;
            border-radius: 0.375rem !important;
            padding: 15px !important;
            box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075) !important;
        }
        .pvtFilterBox input, .pvtFilterBox select {
            border: 1px solid #ced4da !important;
            border-radius: 0.375rem !important;
            padding: 0.375rem 0.75rem !important;
            background-color: #fff !important;
            color: #495057 !important;
        }
        .pvtFilterBox button {
            border-radius: 0.375rem !important;
            padding: 0.375rem 0.75rem !important;
        }
        .pvtCheckContainer {
            background: #f8f9fa !important;
            border-radius: 0.375rem !important;
            padding: 10px !important;
            max-height: 500px;
            overflow-y: auto;
        }
        .pvtCheckContainer label {
            display: block;
            margin-bottom: 5px;
            color: black !important;
        }
        .pvtAttrDropdown {
            border: 1px solid #ced4da !important;
            border-radius: 0.375rem !important;
            padding: 0.375rem 0.75rem !important;
            background-color: #fff !important;
            color: #495057 !important;
        }
        .pvtAggregator {
            border: 1px solid #ced4da !important;
            border-radius: 0.375rem !important;
            padding: 0.375rem 0.75rem !important;
            background-color: #fff !important;
            color: #495057 !important;
        }
        .pvtRendererArea {
            background: #f8f9fa !important;
            color: black !important;
            padding: 10px !important;
            border-radius: 0.375rem !important;
            max-width: 100%;
            overflow-x: auto;
            overflow-y: auto;
            max-height: 650px;
        }
        .pvtAxisContainer, .pvtUnused, .pvtUiCell, .pvtHorizList, .ui-sortable {
            background: #e9ecef !important;
            color: black !important;
            border-radius: 0.375rem !important;
            padding: 10px !important;
            max-height: 500px;
            overflow-y: auto;
        }
        .pvtAxisContainer li, .pvtUnused li, .pvtUiCell li, .pvtHorizList li, .ui-sortable li {
            color: black !important;
            border: 1px solid #dee2e6 !important;
            border-radius: 0.25rem !important;
            margin: 5px !important;
            padding: 5px 10px !important;
            background: #fff !important;
            display: inline-block;
            cursor: grab;
        }
        .pvtRenderer, .pvtAttr, .pvtFilterBox select {
            border: 1px solid #ced4da !important;
            border-radius: 0.375rem !important;
            padding: 0.375rem 0.75rem !important;
            background-color: #fff !important;
            color: #495057 !important;
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out !important;
        }
        .pvtRenderer:focus, .pvtAttr:focus, .pvtFilterBox select:focus {
            border-color: #80bdff !important;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25) !important;
        }
        .ui-draggable-dragging {
            z-index: 1000 !important;
            opacity: 0.8;
            cursor: grabbing;
            width: auto !important;
            height: auto !important;
            background: #fff !important;
            border: 1px solid #007bff !important;
            padding: 5px 10px !important;
            border-radius: 4px !important;
            transform: scale(1.05);
        }
        .ui-draggable-handle {
            cursor: grab;
        }
        .ui-droppable-active {
            background: #d4edda !important;
        }
        .upload-section {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.2);
            transition: transform 0.3s ease;
            text-align: center;
            margin-bottom: 20px;
        }
        .upload-section:hover {
            transform: translateY(-5px);
        }
        .upload-section .input-group {
            max-width: 600px;
            margin: 0 auto;
            border-radius: 30px;
            overflow: hidden;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .upload-section input[type="file"] {
            cursor: pointer;
            opacity: 0;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        .upload-section .form-control {
            background: #ffffff;
            border-radius: 30px 0 0 30px;
            transition: all 0.3s;
            color: black !important;
        }
        .upload-section .form-control:hover {
            background: #f1f3f5;
        }
        .upload-section .btn-upload {
            background: linear-gradient(90deg, #007bff, #0056b3);
            border: none;
            border-radius: 0 30px 30px 0;
            padding: 12px 30px;
            font-weight: 600;
            transition: all 0.3s;
        }
        .upload-section .btn-upload:hover {
            background: linear-gradient(90deg, #0056b3, #003d80);
        }
        .placeholder-message {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 650px;
            width: 100%;
            max-width: 100%;
            background: #f8f9fa;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            text-align: center;
            color: #495057;
            font-size: 1.5rem;
            font-weight: 500;
            padding: 20px;
        }
        .placeholder-message i {
            font-size: 3rem;
            color: #007bff;
            margin-bottom: 20px;
        }
        @keyframes fadeIn {
            0% { opacity: 0; transform: scale(0.95); }
            100% { opacity: 1; transform: scale(1); }
        }
        .full-page-loader {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .full-page-loader .spinner {
            width: 60px;
            height: 60px;
            border: 6px solid #007bff;
            border-top: 6px solid transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        body[data-bs-theme="dark"] {
            background: linear-gradient(-45deg, #333, #555, #777, #999);
            color: #f8f9fa;
        }
        body[data-bs-theme="dark"] .container {
            background: rgba(52, 58, 64, 0.95);
            color: #f8f9fa !important;
        }
        body[data-bs-theme="dark"] #output,
        body[data-bs-theme="dark"] #chart-output {
            background: #343a40;
            border-color: #495057;
            color: #f8f9fa !important;
            max-height: 700px;
        }
        body[data-bs-theme="dark"] .pvtUi {
            background: #495057;
            color: #f8f9fa !important;
        }
        body[data-bs-theme="dark"] .pvtTable {
            border-color: #6c757d !important;
        }
        body[data-bs-theme="dark"] .pvtTable th,
        body[data-bs-theme="dark"] .pvtTable td {
            background: #495057 !important;
            color: #f8f9fa !important;
            border-color: #6c757d !important;
        }
        body[data-bs-theme="dark"] .pvtTable th {
            background: #0056b3 !important;
            color: #f8f9fa !important;
        }
        body[data-bs-theme="dark"] .pvtTable tbody tr:nth-child(even) {
            background-color: #343a40 !important;
        }
        body[data-bs-theme="dark"] .pvtTable tr:hover td {
            background: #6c757d !important;
        }
        body[data-bs-theme="dark"] .pvtDropdown {
            background: #0056b3;
            color: #f8f9fa !important;
        }
        body[data-bs-theme="dark"] .pvtVals,
        body[data-bs-theme="dark"] .pvtRows,
        body[data-bs-theme="dark"] .pvtCols {
            background: #6c757d;
            color: #f8f9fa !important;
        }
        body[data-bs-theme="dark"] .pvtUi * {
            color: #f8f9fa !important;
        }
        body[data-bs-theme="dark"] .pvtFilterBox {
            background: #343a40 !important;
            color: #f8f9fa !important;
            border: 1px solid #495057 !important;
        }
        body[data-bs-theme="dark"] .pvtFilterBox input,
        body[data-bs-theme="dark"] .pvtFilterBox select {
            border: 1px solid #495057 !important;
            background-color: #343a40 !important;
            color: #f8f9fa !important;
        }
        body[data-bs-theme="dark"] .pvtCheckContainer {
            background: #495057 !important;
            color: #f8f9fa !important;
        }
        body[data-bs-theme="dark"] .pvtAttrDropdown,
        body[data-bs-theme="dark"] .pvtAggregator {
            border: 1px solid #495057 !important;
            background-color: #343a40 !important;
            color: #f8f9fa !important;
        }
        body[data-bs-theme="dark"] .pvtRendererArea {
            background: #495057 !important;
            color: #f8f9fa !important;
            overflow-y: auto;
            max-height: 650px;
        }
        body[data-bs-theme="dark"] .pvtAxisContainer,
        body[data-bs-theme="dark"] .pvtUnused,
        body[data-bs-theme="dark"] .pvtUiCell,
        body[data-bs-theme="dark"] .pvtHorizList,
        body[data-bs-theme="dark"] .ui-sortable {
            background: #6c757d !important;
            color: #f8f9fa !important;
        }
        body[data-bs-theme="dark"] .pvtAxisContainer li,
        body[data-bs-theme="dark"] .pvtUnused li,
        body[data-bs-theme="dark"] .pvtUiCell li,
        body[data-bs-theme="dark"] .pvtHorizList li,
        body[data-bs-theme="dark"] .ui-sortable li {
            color: #f8f9fa !important;
            border: 1px solid #495057 !important;
            background: #343a40 !important;
        }
        body[data-bs-theme="dark"] .pvtRenderer,
        body[data-bs-theme="dark"] .pvtAttr,
        body[data-bs-theme="dark"] .pvtFilterBox select {
            border: 1px solid #495057 !important;
            background-color: #343a40 !important;
            color: #f8f9fa !important;
        }
        body[data-bs-theme="dark"] .pvtRenderer:focus,
        body[data-bs-theme="dark"] .pvtAttr:focus,
        body[data-bs-theme="dark"] .pvtFilterBox select:focus {
            border-color: #80bdff !important;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25) !important;
        }
        body[data-bs-theme="dark"] .upload-section {
            background: linear-gradient(135deg, #495057, #6c757d);
        }
        body[data-bs-theme="dark"] .upload-section .form-control {
            background: #343a40;
            color: #f8f9fa !important;
        }
        body[data-bs-theme="dark"] .upload-section .form-control:hover {
            background: #495057;
        }
        body[data-bs-theme="dark"] .upload-section .btn-upload {
            background: linear-gradient(90deg, #0056b3, #003d80);
        }
        body[data-bs-theme="dark"] .placeholder-message {
            background: #495057;
            color: #f8f9fa;
        }
        body[data-bs-theme="dark"] .placeholder-message i {
            color: #80bdff;
        }
        body[data-bs-theme="dark"] .full-page-loader {
            background: rgba(52, 58, 64, 0.8);
        }
        body[data-bs-theme="dark"] .full-page-loader .spinner {
            border: 6px solid #80bdff;
            border-top: 6px solid transparent;
        }
        .js-plotly-plot .plotly .modebar {
            background-color: #f8f9fa !important;
        }
        .js-plotly-plot .plotly .modebar-group a {
            color: black !important;
        }
        body[data-bs-theme="dark"] .js-plotly-plot .plotly .modebar {
            background-color: #343a40 !important;
        }
        body[data-bs-theme="dark"] .js-plotly-plot .plotly .modebar-group a {
            color: #f8f9fa !important;
        }
        body[data-bs-theme="dark"] .js-plotly-plot .plotly svg.main-svg {
            background-color: #343a40 !important;
        }
        body { font-family: Verdana;}
        .c3-line, .c3-focused {stroke-width: 3px !important;}
        .c3-bar {stroke: white !important; stroke-width: 1;}
        .c3 text { font-size: 12px; color: grey;}
        .tick line {stroke: white;}
        .c3-axis path {stroke: grey;}
        .c3-circle { opacity: 1 !important; }
        .form-check.form-switch {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
        }
        .form-check-input {
            margin-right: 5px;
        }
        .form-check-label {
            margin-left: 0;
        }
    </style>
</head>
<body data-bs-theme="light">
    <div class="full-page-loader" id="fullPageLoader">
        <div class="spinner"></div>
    </div>
    <div class="container">
        <h1 class="mb-4 text-center animate__animated animate__fadeIn">Modern Pivot Table UI</h1>
        <p class="lead text-center animate__animated animate__fadeIn animate__delay-1s">Select a CSV file to load data (up to 500K rows supported). Enjoy modern UI, dark/light mode, exports of pivoted data, charts with Plotly, and more!</p>
        
        <div class="form-check form-switch mb-3 text-center animate__animated animate__fadeIn animate__delay-2s">
            <input class="form-check-input" type="checkbox" id="themeToggle">
            <label class="form-check-label" for="themeToggle"><i class="fas fa-moon me-2"></i>Dark Mode</label>
        </div>
        
        <div class="upload-section animate__animated animate__zoomIn animate__delay-3s">
            <h4 class="mb-3"><i class="fas fa-cloud-upload-alt me-2"></i>Upload Your CSV File</h4>
            <p class="text-muted mb-3">Supports large files with background processing</p>
            <div class="input-group">
                <span class="input-group-text"><i class="fas fa-file-csv"></i></span>
                <input type="file" class="form-control" id="fileInput" accept=".csv">
                <button class="btn btn-primary btn-upload" type="button" id="uploadBtn">Upload</button>
            </div>
        </div>
        
        <div id="exportButtons" class="mb-3 d-none text-center animate__animated animate__fadeIn animate__delay-4s">
            <button id="exportCsv" class="btn btn-success btn-modern me-2"><i class="fas fa-file-csv me-2"></i>Export Pivoted to CSV</button>
            <button id="exportXlsx" class="btn btn-info btn-modern me-2"><i class="fas fa-file-excel me-2"></i>Export Pivoted to XLSX</button>
        </div>
        
        <div class="text-center mb-3">
            <button id="toggleChart" class="btn btn-secondary btn-modern d-none"><i class="fas fa-chart-bar me-2"></i>Show Chart View</button>
        </div>
        
        <div id="output" class="animate__animated animate__fadeIn">
            <div class="placeholder-message">
                <i class="fas fa-file-upload"></i>
                <p>Please upload a CSV file to start analyzing your data.</p>
            </div>
        </div>
        <div id="chart-output" class="d-none animate__animated animate__fadeIn"></div>
        
        <footer class="text-center mt-4">
            <p>Developed by Ashkan Norouzi &copy; 2025</p>
        </footer>
    </div>

    <div class="toast-container position-fixed bottom-0 end-0 p-3"></div>

    <div class="toast-container position-fixed bottom-0 end-0 p-3"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    $(document).ready(function() {
        let parsedData = null;
        let isChartVisible = false;
        let pivotConfig = null;
        let isDataLoaded = false;

        // Set up IntersectionObserver for applying animation
        const observerOptions = {
            root: null,
            rootMargin: '0px',
            threshold: 0.1
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting && isDataLoaded && parsedData && parsedData.length > 1000) {
                    entry.target.classList.add('is-visible');
                    observer.unobserve(entry.target);
                }
            });
        }, observerOptions);

        observer.observe(document.getElementById('output'));
        observer.observe(document.getElementById('chart-output'));

        $('#themeToggle').on('change', function() {
            $('#fullPageLoader').css('display', 'flex');
            setTimeout(() => {
                const theme = this.checked ? 'dark' : 'light';
                $('body').attr('data-bs-theme', theme);
                const label = $('#themeToggle').next('label');
                if (theme === 'dark') {
                    label.html('<i class="fas fa-sun me-2"></i>Light Mode');
                } else {
                    label.html('<i class="fas fa-moon me-2"></i>Dark Mode');
                }
                showToast(`Switched to ${theme} mode`, 'success');
                if (isDataLoaded && parsedData) {
                    renderPivotTable();
                    renderPivotChart();
                }
                $('#fullPageLoader').css('display', 'none');
            }, 500);
        });

        $('#uploadBtn').on('click', function() {
            $('#fileInput').click();
        });

        $('#fileInput').on('change', function(e) {
            const file = e.target.files[0];
            if (!file) {
                showToast('No file selected.', 'warning');
                return;
            }
            if (!file.name.endsWith('.csv')) {
                showToast('Please select a valid CSV file.', 'error');
                return;
            }
            parsedData = null;
            isDataLoaded = false;
            $('#output').empty().html(`
                <div class="placeholder-message">
                    <i class="fas fa-file-upload"></i>
                    <p>Please upload a CSV file to start analyzing your data.</p>
                </div>
            `);
            $('#chart-output').empty().addClass('d-none');
            $('#exportButtons, #toggleChart').addClass('d-none');
            $('#fullPageLoader').css('display', 'flex');
            Papa.parse(file, {
                header: true,
                skipEmptyLines: true,
                dynamicTyping: true,
                worker: true,
                complete: function(results) {
                    $('#fullPageLoader').css('display', 'none');
                    if (results.errors.length > 0) {
                        showToast('CSV parsing errors: ' + results.errors.map(err => {
                            if (err.type === 'Quotes') return 'Invalid quotes in CSV.';
                            if (err.type === 'Delimiter') return 'Invalid delimiter detected.';
                            return err.message;
                        }).join(', '), 'error');
                        return;
                    }
                    if (!results.data || results.data.length === 0) {
                        showToast('No data found in CSV.', 'error');
                        return;
                    }
                    if (results.data.length > 500000) {
                        showToast('CSV exceeds 500,000 rows. Please upload a smaller file or use server-side processing.', 'error');
                        return;
                    }
                    parsedData = results.data;
                    isDataLoaded = true;
                    renderPivotTable();
                    renderPivotChart();
                    $('#exportButtons, #toggleChart').removeClass('d-none');
                    showToast('File loaded successfully!', 'success');
                },
                error: function(error) {
                    $('#fullPageLoader').css('display', 'none');
                    showToast('Error parsing CSV: ' + error.message, 'error');
                }
            });
            $(this).val('');
        });

        function renderPivotTable() {
            $('#fullPageLoader').css('display', 'flex');
            setTimeout(() => {
                $('#output').empty().pivotUI(parsedData, {
                    rows: [],
                    cols: [],
                    vals: [],
                    aggregatorName: 'Count',
                    rendererName: 'Table',
                    renderers: $.extend(
                        $.pivotUtilities.renderers,
                        $.pivotUtilities.gchart_renderers,
                        $.pivotUtilities.d3_renderers,
                        $.pivotUtilities.plotly_renderers,
                        $.pivotUtilities.c3_renderers
                    ),
                    hiddenAttributes: ['$$hashKey'],
                    menuLimit: 500000,
                    onRefresh: function(config) {
                        pivotConfig = config;
                        $('.pvtTable').addClass('table table-striped table-bordered table-hover');
                        $('.pvtTable').css({
                            'width': 'auto',
                            'max-width': '100%',
                            'max-height': '100%'
                        });
                        $('.pvtRendererArea').css({
                            'overflow-x': 'auto',
                            'overflow-y': 'auto',
                            'max-height': '650px'
                        });

                        $('.pvtAttr').draggable('destroy').droppable('destroy');
                        $('.pvtRows, .pvtCols, .pvtUnused').droppable('destroy');

                        $('.pvtAttr').draggable({
                            helper: 'clone',
                            appendTo: 'body',
                            containment: 'window',
                            zIndex: 1000,
                            revert: 'invalid',
                            start: function(event, ui) {
                                $(ui.helper).addClass('ui-draggable-dragging');
                            }
                        });

                        $('.pvtRows, .pvtCols, .pvtUnused').droppable({
                            accept: '.pvtAttr',
                            hoverClass: 'ui-droppable-active',
                            activeClass: 'ui-droppable-active',
                            drop: function(event, ui) {
                                $('#fullPageLoader').css('display', 'flex');
                                const attr = ui.draggable.text().trim();
                                const target = $(this).hasClass('pvtRows') ? 'rows' : $(this).hasClass('pvtCols') ? 'cols' : 'unused';
                                updatePivotConfig(attr, target);
                                $('#output').pivotUI(parsedData, pivotConfig, true);
                                $('#fullPageLoader').css('display', 'none');
                            }
                        });

                        $('#fullPageLoader').css('display', 'none');
                    }
                });
                $('#fullPageLoader').css('display', 'none');
            }, 100);
        }

        function updatePivotConfig(attr, target) {
            if (!pivotConfig) {
                pivotConfig = { rows: [], cols: [], vals: [], hiddenAttributes: [] };
            }
            pivotConfig.rows = pivotConfig.rows.filter(item => item !== attr);
            pivotConfig.cols = pivotConfig.cols.filter(item => item !== attr);
            if (target === 'rows') {
                pivotConfig.rows.push(attr);
            } else if (target === 'cols') {
                pivotConfig.cols.push(attr);
            }
        }

        function renderPivotChart() {
            $('#fullPageLoader').css('display', 'flex');
            setTimeout(() => {
                console.log('Parsed Data:', parsedData); // For debugging data
                if (!parsedData || parsedData.length === 0) {
                    showToast('No data available to display chart!', 'error');
                    $('#fullPageLoader').css('display', 'none');
                    return;
                }
                const derivers = $.pivotUtilities.derivers;
                const renderers = $.extend(
                    $.pivotUtilities.renderers,
                    $.pivotUtilities.c3_renderers,
                    $.pivotUtilities.plotly_renderers
                );
                $('#chart-output').empty().pivotUI(parsedData, {
                    renderers: renderers,
                    cols: ["Party"],
                    rows: ["Province"],
                    aggregatorName: "Count", // For counting occurrences
                    rendererName: "Horizontal Stacked Bar Chart",
                    rowOrder: "value_z_to_a",
                    colOrder: "value_z_to_a",
                    rendererOptions: {
                        c3: {
                            data: {
                                colors: {
                                    Liberal: '#dc3912',
                                    Conservative: '#3366cc',
                                    NDP: '#ff9900',
                                    Green: '#109618',
                                    'Bloc Quebecois': '#990099'
                                }
                            }
                        }
                    },
                    onRefresh: function(config) {
                        pivotConfig = config;
                        $('.pvtRendererArea').css({
                            'max-width': '100%',
                            'overflow-x': 'auto',
                            'overflow-y': 'auto',
                            'max-height': '650px'
                        });
                        $('#fullPageLoader').css('display', 'none');
                    }
                });
                $('#fullPageLoader').css('display', 'none');
            }, 100);
        }

        $('#toggleChart').on('click', function() {
            $('#fullPageLoader').css('display', 'flex');
            setTimeout(() => {
                isChartVisible = !isChartVisible;
                if (isChartVisible) {
                    $('#output').addClass('d-none');
                    $('#chart-output').removeClass('d-none');
                    $(this).html('<i class="fas fa-table me-2"></i>Show Table View');
                    renderPivotChart();
                    $('.pvtRenderer').val('Horizontal Stacked Bar Chart').trigger('change');
                    showToast('Switched to Chart View', 'info');
                } else {
                    $('#output').removeClass('d-none');
                    $('#chart-output').addClass('d-none');
                    $(this).html('<i class="fas fa-chart-bar me-2"></i>Show Chart View');
                    renderPivotTable();
                    $('.pvtRenderer').val('Table').trigger('change');
                    showToast('Switched to Table View', 'info');
                }
                $('#fullPageLoader').css('display', 'none');
            }, 100);
        });

        $('#exportCsv').on('click', function () {
            $('#fullPageLoader').css('display', 'flex');
            setTimeout(() => {
                try {
                    const $pivotTable = $('#output table.pvtTable');
                    if ($pivotTable.length === 0) {
                        showToast('No pivoted data found.', 'warning');
                        $('#fullPageLoader').hide();
                        return;
                    }

                    const grid = [];
                    const skipMap = {}; // For rowspan cells

                    $pivotTable.find('tr').each((rowIndex, tr) => {
                        const row = [];
                        let colIndex = 0;

                        $(tr).find('th, td').each((_, cell) => {
                            const $cell = $(cell);
                            const text = $cell.text().trim();
                            const colspan = parseInt($cell.attr('colspan')) || 1;
                            const rowspan = parseInt($cell.attr('rowspan')) || 1;

                            // Skip cells occupied by previous rowspan
                            while (skipMap[`${rowIndex},${colIndex}`]) {
                                row.push(skipMap[`${rowIndex},${colIndex}`]);
                                colIndex++;
                            }

                            // Current cell text
                            row.push(text);

                            // Fill empty cells for colspan
                            for (let c = 1; c < colspan; c++) {
                                row.push('');
                                colIndex++;
                            }

                            // Store rowspan cells for subsequent rows
                            for (let r = 1; r < rowspan; r++) {
                                for (let c = 0; c < colspan; c++) {
                                    skipMap[`${rowIndex + r},${colIndex - (colspan - 1) + c}`] = '';
                                }
                            }

                            colIndex++;
                        });

                        grid.push(row);
                    });

                    // Convert array to CSV and save
                    const csvContent = grid.map(r => r.map(cell => (cell.includes(',') ? `"${cell}"` : cell)).join(',')).join('\n');
                    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                    const link = document.createElement('a');
                    link.href = URL.createObjectURL(blob);
                    link.download = 'pivoted_export.csv';
                    link.click();

                    showToast('Exported pivoted data to CSV with merged cells successfully!', 'success');
                } catch (err) {
                    showToast('Error exporting CSV: ' + err.message, 'error');
                }
                $('#fullPageLoader').hide();
            }, 100);
        });

        $('#exportXlsx').on('click', function() {
            $('#fullPageLoader').css('display', 'flex');
            setTimeout(() => {
                const $container = isChartVisible ? $('#chart-output') : $('#output');
                const $table = $container.find('.pvtTable');
                if (!$table.length) {
                    showToast('No table found to export. Please ensure Table renderer is selected.', 'warning');
                    $('#fullPageLoader').css('display', 'none');
                    return;
                }

                try {
                    // Extract data and merges from table DOM
                    const wb = XLSX.utils.book_new();
                    const ws = XLSX.utils.table_to_sheet($table[0], { raw: true });
                    
                    // Extract merge information from HTML table
                    const merges = [];
                    $table.find('tr').each((r, row) => {
                        $(row).find('th, td').each((c, cell) => {
                            const rowspan = parseInt(cell.getAttribute('rowspan') || '1');
                            const colspan = parseInt(cell.getAttribute('colspan') || '1');
                            if (rowspan > 1 || colspan > 1) {
                                merges.push({
                                    s: { r, c },
                                    e: { r: r + rowspan - 1, c: c + colspan - 1 }
                                });
                            }
                        });
                    });
                    ws['!merges'] = merges;

                    // Basic styling (column widths and appearance settings)
                    const range = XLSX.utils.decode_range(ws['!ref']);
                    const colWidths = [];
                    for (let C = range.s.c; C <= range.e.c; ++C) {
                        let maxWidth = 10;
                        for (let R = range.s.r; R <= range.e.r; ++R) {
                            const cell = ws[XLSX.utils.encode_cell({ r: R, c: C })];
                            if (cell && cell.v) {
                                const len = cell.v.toString().length;
                                if (len > maxWidth) maxWidth = len;
                            }
                        }
                        colWidths.push({ wch: maxWidth + 2 });
                    }
                    ws['!cols'] = colWidths;

                    XLSX.utils.book_append_sheet(wb, ws, 'Pivot Table');
                    XLSX.writeFile(wb, 'pivot_export.xlsx');
                    showToast('Pivot table exported to Excel successfully!', 'success');
                } catch (err) {
                    showToast('Error exporting to XLSX: ' + err.message, 'error');
                }

                $('#fullPageLoader').css('display', 'none');
            }, 100);
        });

        function extractTableData() {
            const $container = isChartVisible ? $('#chart-output') : $('#output');
            const $table = $container.find('.pvtTable');
            if (!$table.length) {
                showToast('No table found to export. Please ensure Table renderer is selected.', 'warning');
                return null;
            }

            const $thead = $table.find('thead');
            const $tbody = $table.find('tbody');
            const headerRowCount = $thead.find('tr').length;
            const bodyRowCount = $tbody.find('tr').length;

            if (headerRowCount === 0 || bodyRowCount === 0) {
                return null;
            }

            // Initialize a grid to store the table data
            let grid = [];
            let maxCols = 0;

            // Step 1: Process headers to capture city names and their spans
            let headerGrid = [];
            let cityRow = [];
            let ageRow = [];
            let colIndexMap = []; // Maps column indices to city names

            $thead.find('tr').each(function(rowIndex) {
                let colIndex = 0;
                if (!headerGrid[rowIndex]) headerGrid[rowIndex] = [];
                $(this).find('th').each(function() {
                    const $th = $(this);
                    const text = $th.text().trim();
                    const colspan = parseInt($th.attr('colspan')) || 1;
                    const rowspan = parseInt($th.attr('rowspan')) || 1;

                    // Skip cells already occupied by previous rowspan
                    while (headerGrid[rowIndex][colIndex]) colIndex++;

                    // Handle city row (first row, excluding the first column)
                    if (rowIndex === 0 && !$th.hasClass('pvtAxisLabel')) {
                        for (let c = 0; c < colspan; c++) {
                            cityRow[colIndex + c] = text;
                            colIndexMap[colIndex + c] = text; // Map column to city
                        }
                    }

                    // Handle age row (second row)
                    if (rowIndex === 1 && !$th.hasClass('pvtAxisLabel')) {
                        for (let c = 0; c < colspan; c++) {
                            ageRow[colIndex + c] = text;
                        }
                    }

                    // Fill header grid considering colspan and rowspan
                    for (let r = 0; r < rowspan; r++) {
                        if (!headerGrid[rowIndex + r]) headerGrid[rowIndex + r] = [];
                        for (let c = 0; c < colspan; c++) {
                            headerGrid[rowIndex + r][colIndex + c] = text || headerGrid[rowIndex + r][colIndex + c] || '';
                        }
                    }
                    colIndex += colspan;
                });
                maxCols = Math.max(maxCols, colIndex);
            });

            // Step 2: Construct header rows with city names repeated
            let finalHeaderGrid = [];
            finalHeaderGrid[0] = ['', ...cityRow.slice(1), 'Totals']; // City row, starting with empty cell
            finalHeaderGrid[1] = ['Age', ...ageRow.slice(1), '']; // Age row, starting with "Age"
            finalHeaderGrid[2] = ['Name', ...new Array(maxCols - 1).fill(''), '']; // Name row

            // Step 3: Process body with row labels
            let bodyGrid = [];
            $tbody.find('tr').each(function(rowIndex) {
                let colIndex = 0;
                const row = new Array(maxCols).fill('');
                $(this).find('th, td').each(function() {
                    const $cell = $(this);
                    const text = $cell.text().trim();
                    const colspan = parseInt($cell.attr('colspan')) || 1;
                    const rowspan = parseInt($cell.attr('rowspan')) || 1;

                    // Skip cells occupied by previous rowspan
                    while (row[colIndex]) colIndex++;

                    // Fill cells (only the first cell for rowspan)
                    for (let c = 0; c < colspan; c++) {
                        row[colIndex + c] = (c === 0) ? text : '';
                    }
                    colIndex += colspan;
                });
                bodyGrid.push(row);
            });

            // Step 4: Combine headers and body
            grid = [...finalHeaderGrid, ...bodyGrid];

            // Step 5: Shift body rows to place row labels in the first column
            const firstColIsRowLabel = bodyGrid.every(row => row[0] !== '');
            if (firstColIsRowLabel) {
                for (let r = headerRowCount; r < grid.length; r++) {
                    grid[r] = [bodyGrid[r - headerRowCount][0], ...grid[r].slice(1)];
                }
            }

            return grid;
        }

        function showToast(message, type = 'success') {
            const bgClass = {
                success: 'bg-success',
                error: 'bg-danger',
                info: 'bg-info',
                warning: 'bg-warning'
            }[type] || 'bg-primary';
            const toastHtml = `
                <div class="toast align-items-center text-white ${bgClass} border-0 animate__animated animate__slideInRight" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `;
            const toastElement = $(toastHtml).appendTo('.toast-container');
            const toast = new bootstrap.Toast(toastElement[0], { delay: 5000 });
            toast.show();
        }
    });
</script>
</body>
</html>